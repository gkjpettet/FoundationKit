<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2020r1.1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="615698431">
 <ObjName>FKHashMap</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>FKMap</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clear</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Removes all of the mappings from this map</CodeDescription>
  <PartID>1856620543</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Clear()</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Removes all of the mappings from this map</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mData.RemoveAllRows</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ContainsKey</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns True if this map contains a mapping for the specified key.</CodeDescription>
  <PartID>860635135</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ContainsKey(key As Variant) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns True if this map contains a mapping for the specified key.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each p As FKPair In mData</SourceLine>
   <SourceLine>If Equals(p.Key, key) Then Return True</SourceLine>
   <SourceLine>Next p</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ContainsValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns True if this map maps one or more keys to the specified value.</CodeDescription>
  <PartID>1699993599</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ContainsValue(value As Variant) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns True if this map maps one or more keys to the specified value.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each p As FKPair In mData</SourceLine>
   <SourceLine>If Equals(p.Value, value) Then Return True</SourceLine>
   <SourceLine>Next p</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>value As Variant</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Get</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the value to which the specified key is mapped, or Nil if this map contains no mapping for the key.</CodeDescription>
  <PartID>1797390335</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Get(key As Variant) As Variant</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns the value to which the specified key is mapped, or Nil if this map </SourceLine>
   <SourceLine>' contains no mapping for the key.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Lookup(key, Nil)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>GetOrDefault</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the value to which the specified key is mapped, or `defaultValue` if this map contains no mapping for the key.</CodeDescription>
  <PartID>2103777279</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetOrDefault(key As Variant, default As Variant) As Variant</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns the value to which the specified key is mapped, or `defaultValue` if </SourceLine>
   <SourceLine>' this map contains no mapping for the key.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Lookup(key, default)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant, default As Variant</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>IsEmpty</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns True if this map contains no key-value mappings.</CodeDescription>
  <PartID>1672691711</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsEmpty() As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns True if this map contains no key-value mappings.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return mData.Count = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Put</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Associates a value with the specified key in this map. Returns the previous value associated with key, or Nil if there was no mapping for the key.</CodeDescription>
  <PartID>547223551</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Put(key As Variant, value As Variant) As Variant</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Associates the specified value with the specified key in this map.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: The previous value associated with key, or Nil if there was no mapping for key.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' Part of the FKMap interface.</SourceLine>
   <SourceLine>' If the map previously contained a mapping for the key, the old value is replaced </SourceLine>
   <SourceLine>' by the specified value.</SourceLine>
   <SourceLine>' A map is said to contain a mapping for a key if and only if: map.ContainsKey(key) = True</SourceLine>
   <SourceLine>' A Nil return can also indicate that the map previously associated Nil with `key`.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var limit As Integer = mData.LastRowIndex</SourceLine>
   <SourceLine>Var p As FKPair</SourceLine>
   <SourceLine>For i As Integer = 0 To limit</SourceLine>
   <SourceLine>// Get this key:value pair.</SourceLine>
   <SourceLine>p = mData(i)</SourceLine>
   <SourceLine>If Equals(p.Key, key) Then</SourceLine>
   <SourceLine>// Cache the old value to return.</SourceLine>
   <SourceLine>Var oldValue As Variant = p.Value</SourceLine>
   <SourceLine>// Assign the new value.</SourceLine>
   <SourceLine>p.Value = value</SourceLine>
   <SourceLine>// Return the old value.</SourceLine>
   <SourceLine>Return oldValue</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// This key doesn't exist yet. Add it.</SourceLine>
   <SourceLine>mData.AddRow(New FKPair(key, value))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Return Nil.</SourceLine>
   <SourceLine>Return Nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant, value As Variant</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>PutAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</CodeDescription>
  <PartID>1642096639</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PutAll(m As FKMap)</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Copies all of the mappings from the specified map to this map. </SourceLine>
   <SourceLine>' These mappings will replace any mappings that this map had for any of the keys </SourceLine>
   <SourceLine>' currently in the specified map.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Unused m</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Raise New UnsupportedOperationException("This method is not implemented")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>m As FKMap</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>PutIfAbsent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1402894335</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function PutIfAbsent(key As Variant, value As Variant) As Variant</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Unused key</SourceLine>
   <SourceLine>#Pragma Unused value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Raise New UnsupportedOperationException("This method is not implemented")</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant, value As Variant</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Removes the mapping for the specified key from this map if present. Returns the previous value or Nil.</CodeDescription>
  <PartID>2010908671</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Remove(key As Variant) As Variant</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Removes the mapping for the specified key from this map if present. </SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: The previous value associated with key, or Nil if there was no mapping for key.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' Part of the FKMap interface.</SourceLine>
   <SourceLine>' A Nil return can also indicate that the map previously associated Nil with key.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var limit As Integer = mData.LastRowIndex</SourceLine>
   <SourceLine>Var p As FKPair</SourceLine>
   <SourceLine>Var indexToRemove As Integer = -1</SourceLine>
   <SourceLine>For i As Integer = 0 To limit</SourceLine>
   <SourceLine>// Get the key:value pair.</SourceLine>
   <SourceLine>p = mData(i)</SourceLine>
   <SourceLine>If Equals(p.Key, key) Then</SourceLine>
   <SourceLine>// This is the key:value pair to remove.</SourceLine>
   <SourceLine>indexToRemove = i</SourceLine>
   <SourceLine>Exit</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If indexToRemove &lt;&gt; -1 Then</SourceLine>
   <SourceLine>// Cache the value we are about to remove.</SourceLine>
   <SourceLine>Var tmp As Variant = mData(indexToRemove).Value</SourceLine>
   <SourceLine>// Remove the key:value pair.</SourceLine>
   <SourceLine>mData.RemoveRowAt(indexToRemove)</SourceLine>
   <SourceLine>// Remove the cached old value.</SourceLine>
   <SourceLine>Return tmp</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>// The key was not found so return Nil.</SourceLine>
   <SourceLine>Return Nil</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1707884543</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Remove(key As Variant, value As Variant) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Unused key</SourceLine>
   <SourceLine>#Pragma Unused value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Raise New UnsupportedOperationException("This method is not implemented")</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant, value As Variant</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Replace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1771802623</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Replace(key As Variant, value As Variant) As Variant</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Unused key</SourceLine>
   <SourceLine>#Pragma Unused value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Raise New UnsupportedOperationException("This method is not implemented")</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant, value As Variant</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Replace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1751369727</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Replace(key As Variant, oldValue As Variant, newValue As Variant) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Unused key</SourceLine>
   <SourceLine>#Pragma Unused oldValue</SourceLine>
   <SourceLine>#Pragma Unused newValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Raise New UnsupportedOperationException("This method is not implemented")</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant, oldValue As Variant, newValue As Variant</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the number of key-value mappings in this map.</CodeDescription>
  <PartID>2033616895</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Size() As Integer</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns the number of key-value mappings in this map.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return mData.Count</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Values</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns an array of the values contained in this map.</CodeDescription>
  <PartID>1827897343</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Values() As Variant()</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns an array of the values contained in this map.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var result() As Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each p As FKPair In mData</SourceLine>
   <SourceLine>result.AddRow(p.Value)</SourceLine>
   <SourceLine>Next p</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Variant()</ItemResult>
 </Method>
 <Method>
  <ItemName>HashCode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the hash code value for this map.</CodeDescription>
  <PartID>1639874559</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HashCode() As Integer</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns the hash code value for this map.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Note: Part of the FKMap interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Variant(Self).Hash</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2056738815</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Default constructor.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mData.RemoveAllRows</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Equals</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns True if the two objects are considered equal.</CodeDescription>
  <PartID>1184882687</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Equals(obj1 As Variant, obj2 As Variant) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns True if the two objects are considered equal.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Quick reference check.</SourceLine>
   <SourceLine>If obj1 Is obj2 Then Return True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Check using the FKComparable interface.</SourceLine>
   <SourceLine>If obj1 IsA FKComparable Then</SourceLine>
   <SourceLine>If FKComparable(obj1).Equals(obj2) Then</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf obj2 IsA FKComparable Then</SourceLine>
   <SourceLine>If FKComparable(obj2).Equals(obj1) Then</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Case sensitive strings.</SourceLine>
   <SourceLine>If obj1.Type = Variant.TypeString And obj2.Type = Variant.TypeString Then</SourceLine>
   <SourceLine>Var obj1String As String = obj1</SourceLine>
   <SourceLine>Return obj1String.Compare(obj2, ComparisonOptions.CaseSensitive) = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// All other types.</SourceLine>
   <SourceLine>Return obj1 = obj2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>obj1 As Variant, obj2 As Variant</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Put</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Associates a value with the specified key in this map.</CodeDescription>
  <PartID>1756952575</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Put(key As Variant, value As Variant)</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Associates the specified value with the specified key in this map.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' Part of the FKMap interface.</SourceLine>
   <SourceLine>' If the map previously contained a mapping for the key, the old value is replaced </SourceLine>
   <SourceLine>' by the specified value.</SourceLine>
   <SourceLine>' A map is said to contain a mapping for a key if and only if: map.ContainsKey(key) = True</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var limit As Integer = mData.LastRowIndex</SourceLine>
   <SourceLine>Var p As FKPair</SourceLine>
   <SourceLine>For i As Integer = 0 To limit</SourceLine>
   <SourceLine>// Get this key:value pair.</SourceLine>
   <SourceLine>p = mData(i)</SourceLine>
   <SourceLine>If Equals(p.Key, key) Then</SourceLine>
   <SourceLine>// Assign the new value.</SourceLine>
   <SourceLine>p.Value = value</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// This key doesn't exist yet. Add it.</SourceLine>
   <SourceLine>mData.AddRow(New FKPair(key, value))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant, value As Variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Lookup</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the value associated with the specified key or the default value if key is not found.</CodeDescription>
  <PartID>758980607</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Lookup(key As Variant, default As Variant) As Variant</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns the value associated with the specified key or the default value if key is not found.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter key: The key to lookup.</SourceLine>
   <SourceLine>' - Parameter default: The default value to return if key is not found.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each p As FKPair In mData</SourceLine>
   <SourceLine>If Equals(p.Key, key) Then Return p.Value</SourceLine>
   <SourceLine>Next p</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return default</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key As Variant, default As Variant</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Property>
  <ItemName>mData()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>The backing array.</CodeDescription>
  <PartID>1610739711</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mData() As FKPair</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mData() As FKPair</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
