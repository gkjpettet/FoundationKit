<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2020r1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="2400255">
 <ObjName>FKPriorityQueue</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Creates a PriorityQueue with the default initial capacity (11) that orders its elements according to their natural ordering.</CodeDescription>
  <PartID>206260223</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Creates a PriorityQueue with the default initial capacity (11) that orders </SourceLine>
   <SourceLine>' its elements according to their natural ordering.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Constructor(DEFAULT_INITIAL_CAPACITY)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Creates a PriorityQueue with the specified initial capacity that orders its elements according to their natural ordering.</CodeDescription>
  <PartID>572372991</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(initialCapacity As Integer)</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Creates a PriorityQueue with the specified initial capacity that orders its </SourceLine>
   <SourceLine>' elements according to their natural ordering.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter initialCapacity: The initial capacity for this priority queue.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Raises: InvalidArgumentException if `initialCapacity` is less than 1.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Constructor(initialCapacity, Nil)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initialCapacity As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>928215039</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(comparator As FKComparator)</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Creates a PriorityQueue with the default initial capacity and whose elements </SourceLine>
   <SourceLine>' are ordered according to the specified comparator.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter comparator: The comparator that will be used to order this priority </SourceLine>
   <SourceLine>'                         queue. If `Nil`, the natural ordering of the elements </SourceLine>
   <SourceLine>'                         will be used.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Constructor(DEFAULT_INITIAL_CAPACITY, comparator)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>comparator As FKComparator</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1226930175</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(initialCapacity As Integer, comparator As FKComparator)</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Creates a `PriorityQueue` with the specified initial capacity that orders its </SourceLine>
   <SourceLine>' elements according to the specified comparator.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter initialCapacity: The initial capacity for this priority queue.</SourceLine>
   <SourceLine>' - Parameter comparator: The comparator that will be used to order this</SourceLine>
   <SourceLine>'                         priority queue. If `Nil`, the natural ordering of </SourceLine>
   <SourceLine>'                         the elements will be used.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Raises: InvalidArgumentException if `initialCapacity` is less than 1.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If initialCapacity &lt; 1 Then Raise New InvalidArgumentException</SourceLine>
   <SourceLine>Self.Queue.ResizeTo(initialCapacity - 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If comparator &lt;&gt; Nil Then</SourceLine>
   <SourceLine>#Pragma Warning "TODO: Implement custom comparators"</SourceLine>
   <SourceLine>Raise New UnsupportedOperationException("Custom comparators are not not implemented")</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mComparator = comparator</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initialCapacity As Integer, comparator As FKComparator</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>EnsureNonEmpty</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Ensures that Queue(0) exists, helping `Peek` and `Poll`.</CodeDescription>
  <PartID>124805119</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EnsureNonEmpty(es() as FKComparable) As FKComparable()</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Ensures that Queue(0) exists, helping `Peek` and `Poll`.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter es(): The array to ensure is non-empty.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: The original array if non-empty or a new empty array.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If es.Count &gt; 0 Then</SourceLine>
   <SourceLine>Return es</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Var result(0) As FKComparable</SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>es() as FKComparable</ItemParams>
  <ItemResult>FKComparable()</ItemResult>
 </Method>
 <Method>
  <ItemName>Grow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Increases the capacity of the array.</CodeDescription>
  <PartID>1808476159</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Grow(minCapacity As Integer)</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Increases the capacity of the array.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter minCapacity: The desired minimum capacity.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var oldCapacity As Integer = Queue.Count</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Double the size if small, else grow by 50%.</SourceLine>
   <SourceLine>Var newCapacity As Integer = FKArraysSupport.NewLength(_</SourceLine>
   <SourceLine>oldCapacity, _</SourceLine>
   <SourceLine>minCapacity - oldCapacity, _</SourceLine>
   <SourceLine>If(oldCapacity &lt; 64, oldCapacity + 2, MathsKit.RShift(oldCapacity, 1)))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Queue = FKArrays.CopyOf(queue, newCapacity)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>minCapacity As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Add</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Inserts the specified element into this priority queue, if permitted.</CodeDescription>
  <PartID>655028223</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Add(e As FKComparable) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Inserts the specified element into this priority queue, if permitted.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter e: The element to add.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: True if the element was added to this priority queue.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Offer(e)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>e As FKComparable</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Offer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.</CodeDescription>
  <PartID>857980927</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Offer(e As FKComparable) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Inserts the specified element into this queue if it is possible to do so immediately </SourceLine>
   <SourceLine>' without violating capacity restrictions.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter e: The element to add.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: True if the element was added to this queue or False if not.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Raises: NilObjectException if the passed element is Nil.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If e Is Nil Then Raise New NilObjectException("Cannot add a Nil element to a priority queue")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ModCount = ModCount + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var i As Integer = Size</SourceLine>
   <SourceLine>If i &gt;= queue.Ubound + 1 Then Grow(i + 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SiftUp(i, e)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mSize = i + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>e As FKComparable</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Peek</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Retrieves, but does not remove, the head of this queue, or returns Nil if this queue is empty.</CodeDescription>
  <PartID>1968197631</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Peek() As FKComparable</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Retrieves, but does not remove, the head of this queue, or returns Nil if this </SourceLine>
   <SourceLine>' queue is empty.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: The head of the queue or Nil.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Queue(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>FKComparable</ItemResult>
 </Method>
 <Method>
  <ItemName>IndexOf</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the index in the queue of the passed object or -1 if it's not present.</CodeDescription>
  <PartID>1988087807</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IndexOf(obj As FKComparable) As Integer</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns the index in the queue of the passed object or -1 if it's not present.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter obj: The object to find.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: The 0-based index in the queue or -1 if not found.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If obj &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Var iLimit As Integer = Queue.LastRowIndex</SourceLine>
   <SourceLine>For i As Integer = 0 To iLimit</SourceLine>
   <SourceLine>If obj = Queue(i) Then Return i</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>obj As FKComparable</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Removes a single instance of the specified element from this queue, if it is present. Returns True if successful.</CodeDescription>
  <PartID>1442248703</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Remove(obj As FKComparable) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Removes a single instance of the specified element from this queue, if it is present.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter obj: Telement to be removed from this queue.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: True if this queue changed as a result of this call.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var i As Integer = IndexOf(obj)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If i = -1 Then</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Queue.RemoveRowAt(i)</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>obj As FKComparable</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Contains</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns True if this queue contains the specified element.</CodeDescription>
  <PartID>1056483327</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Contains(obj As FKComparable) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns True if this queue contains the specified element.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter obj: The object to be checked for containment in this queue.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' Returns True if and only if this queue contains at least one element `e` such that `o = e`.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return IndexOf(obj) &gt;= 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>obj As FKComparable</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ToArray</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns a new array containing all of the elements in this queue. The elements are in no particular order.</CodeDescription>
  <PartID>1887557631</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToArray() As FKComparable()</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns a new array containing all of the elements in this queue. </SourceLine>
   <SourceLine>' The elements are in no particular order.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return FKArrays.CopyOf(Queue, Size)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>FKComparable()</ItemResult>
 </Method>
 <Method>
  <ItemName>Clear</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Removes all of the elements from this priority queue.</CodeDescription>
  <PartID>923916287</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Clear()</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Removes all of the elements from this priority queue.</SourceLine>
   <SourceLine>' The queue will be empty after this call returns.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ModCount = ModCount + 1</SourceLine>
   <SourceLine>Queue.RemoveAllRows</SourceLine>
   <SourceLine>mSize = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Poll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Retrieves and removes the head of this queue, or returns Nil if this queue is empty.</CodeDescription>
  <PartID>2090745855</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Poll() As FKComparable</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Retrieves and removes the head of this queue, or returns Nil if this queue is empty.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var es() As FKComparable</SourceLine>
   <SourceLine>Var result As FKComparable</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>es = Queue</SourceLine>
   <SourceLine>If es(0) &lt;&gt; Nil Then</SourceLine>
   <SourceLine>ModCount = ModCount + 1</SourceLine>
   <SourceLine>mSize = mSize - 1</SourceLine>
   <SourceLine>Var n As Integer = Size</SourceLine>
   <SourceLine>Var x As FKComparable = es(n)</SourceLine>
   <SourceLine>es(n) = Nil</SourceLine>
   <SourceLine>If n &gt; 0 Then</SourceLine>
   <SourceLine>If Comparator Is Nil Then</SourceLine>
   <SourceLine>SiftDownComparable(0, x, es, n)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>SiftDownUsingComparator(0, x, es, n, Comparator)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>FKComparable</ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveAt</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Removes the ith element from queue.</CodeDescription>
  <PartID>98041855</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function RemoveAt(i As Integer) As FKComparable</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Removes the ith element from queue.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter i: The index of the element to remove.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' Normally this method leaves the elements at up to i-1, inclusive, untouched. </SourceLine>
   <SourceLine>' Under these circumstances, it returns Nil. </SourceLine>
   <SourceLine>' Occasionally, in order to maintain the heap invariant, it must swap a later </SourceLine>
   <SourceLine>' element of the list with one earlier than `i`. Under these circumstances, </SourceLine>
   <SourceLine>' this method returns the element that was previously at the end of the list and </SourceLine>
   <SourceLine>' is now at some position before `i`. This fact is used by iterator.Remove so as to</SourceLine>
   <SourceLine>' avoid missing traversing elements.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var es() As FKComparable = Queue</SourceLine>
   <SourceLine>ModCount = ModCount + 1</SourceLine>
   <SourceLine>mSize = mSize - 1</SourceLine>
   <SourceLine>If mSize = i Then</SourceLine>
   <SourceLine>// Removed last element.</SourceLine>
   <SourceLine>es(i) = Nil</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Var moved As FKComparable = es(mSize)</SourceLine>
   <SourceLine>es(mSize) = Nil</SourceLine>
   <SourceLine>SiftDown(i, moved)</SourceLine>
   <SourceLine>If es(i) = moved Then</SourceLine>
   <SourceLine>SiftUp(i, moved)</SourceLine>
   <SourceLine>If es(i) &lt;&gt; moved Then Return moved</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>i As Integer</ItemParams>
  <ItemResult>FKComparable</ItemResult>
 </Method>
 <Method>
  <ItemName>SiftUp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Inserts item x at position k, maintaining heap invariant by promoting x up the tree until it is &gt;= to its parent, or is the root.</CodeDescription>
  <PartID>1439354879</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SiftUp(k As Integer, x As FKComparable)</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Inserts item x at position k, maintaining heap invariant by promoting x up the tree </SourceLine>
   <SourceLine>' until it is &gt;= to its parent, or is the root.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter k: The position to fill.</SourceLine>
   <SourceLine>' - Parameter x: The item to insert.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' To simplify and speed up coercions and comparisons, the FKComparable and FKComparator </SourceLine>
   <SourceLine>' versions are separated into different methods that are otherwise identical.</SourceLine>
   <SourceLine>' (Similarly for `SiftDown`).</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Comparator &lt;&gt; Nil Then</SourceLine>
   <SourceLine>SiftUpUsingComparator(k, x, queue, comparator)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>SiftUpComparable(k, x, queue)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>k As Integer, x As FKComparable</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SiftUpComparable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2050465791</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub SiftUpComparable(k As Integer, x As FKComparable, es() As FKComparable)</SourceLine>
   <SourceLine>Var key As FKComparable = x</SourceLine>
   <SourceLine>While k &gt; 0</SourceLine>
   <SourceLine>Var parent As Integer = MathsKit.RShiftU32(k - 1, 1)</SourceLine>
   <SourceLine>Var e As FKComparable = es(parent)</SourceLine>
   <SourceLine>If key.CompareTo(e) &gt;= 0 Then Exit</SourceLine>
   <SourceLine>es(k) = e</SourceLine>
   <SourceLine>k = parent</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>es(k) = key</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>k As Integer, x As FKComparable, es() As FKComparable</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SiftUpUsingComparator</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>41322495</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub SiftUpUsingComparator(k As Integer, x As FKComparable, es() As FKComparable, cmp As FKComparator)</SourceLine>
   <SourceLine>#Pragma Unused k</SourceLine>
   <SourceLine>#Pragma Unused x</SourceLine>
   <SourceLine>#Pragma Unused es</SourceLine>
   <SourceLine>#Pragma Unused cmp</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Warning "TODO: Implement sifting up with a custom comparator"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Raise New UnsupportedOperationException("Sifting up with a custom comparator " + _</SourceLine>
   <SourceLine>"is not yet implemented")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>k As Integer, x As FKComparable, es() As FKComparable, cmp As FKComparator</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SiftDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Inserts item x at position k, maintaining heap invariant by demoting x down the tree repeatedly until it is &lt;= to its children or is a leaf.</CodeDescription>
  <PartID>1086212095</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SiftDown(k As Integer, x As FKComparable)</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Inserts item x at position k, maintaining heap invariant by demoting x down the tree </SourceLine>
   <SourceLine>' repeatedly until it is &lt;= to its children or is a leaf.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter k: The position to fill.</SourceLine>
   <SourceLine>' - Parameter x: The item to insert.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Comparator &lt;&gt; Nil Then</SourceLine>
   <SourceLine>SiftDownUsingComparator(k, x, Queue, mSize, Comparator)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>SiftDownComparable(k, x, Queue, mSize)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>k As Integer, x As FKComparable</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SiftDownComparable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>799100927</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub SiftDownComparable(k As Integer, x As FKComparable, es() As FKComparable, n As Integer)</SourceLine>
   <SourceLine>Var key As FKComparable = x</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var half As Integer = MathsKit.RShiftU32(n, 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Loop while a non-leaf.</SourceLine>
   <SourceLine>While k &lt; half</SourceLine>
   <SourceLine>Var child As Integer = MathsKit.LShift32(k, 1) + 1 // Assume left child is least.</SourceLine>
   <SourceLine>Var c As FKComparable = es(child)</SourceLine>
   <SourceLine>Var right As Integer = child + 1</SourceLine>
   <SourceLine>If right &lt; n And c.CompareTo(es(right)) &gt; 0 Then</SourceLine>
   <SourceLine>child = right</SourceLine>
   <SourceLine>c = es(child)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If key.CompareTo(c) &lt;= 0 Then Exit</SourceLine>
   <SourceLine>es(k) = c</SourceLine>
   <SourceLine>k = child</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>es(k) = key</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>k As Integer, x As FKComparable, es() As FKComparable, n As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SiftDownUsingComparator</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>675092479</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub SiftDownUsingComparator(k As Integer, x As FKComparable, es() As FKComparable, n As Integer, cmp As FKComparator)</SourceLine>
   <SourceLine>#Pragma Unused k</SourceLine>
   <SourceLine>#Pragma Unused x</SourceLine>
   <SourceLine>#Pragma Unused es</SourceLine>
   <SourceLine>#Pragma Unused n</SourceLine>
   <SourceLine>#Pragma Unused cmp</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Warning "TODO: Implement sifting down with a custom comparator"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Raise New UnsupportedOperationException("Sifting down with a custom comparator " + _</SourceLine>
   <SourceLine>"is not yet implemented")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>k As Integer, x As FKComparable, es() As FKComparable, n As Integer, cmp As FKComparator</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Heapify</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Establishes the heap invariant in the entire tree, assuming nothing about the order of the elements prior to the call.</CodeDescription>
  <PartID>1044576255</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Heapify()</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Establishes the heap invariant in the entire tree, assuming nothing about the </SourceLine>
   <SourceLine>' order of the elements prior to the call.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' This classic algorithm due to Floyd (1964) is known to be O(size).</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var es() As FKComparable = Queue</SourceLine>
   <SourceLine>Var n As Integer = size</SourceLine>
   <SourceLine>Var i As Integer = MathsKit.RShiftU32(n, 1) - 1</SourceLine>
   <SourceLine>If Comparator Is Nil Then</SourceLine>
   <SourceLine>While i &gt;= 0</SourceLine>
   <SourceLine>SiftDownComparable(i, es(i), es, n)</SourceLine>
   <SourceLine>i = i - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>While i &gt;= 0</SourceLine>
   <SourceLine>SiftDownUsingComparator(i, es(i), es, n, mComparator)</SourceLine>
   <SourceLine>i = i - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsEmpty</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns True if this queue is empty or False if it has elements.</CodeDescription>
  <PartID>320382975</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsEmpty() As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns True if this queue is empty or False if it has elements.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return mSize = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>648456191</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>A partial implementation of the OpenJDK PriorityQueue class.</NoteLine>
   <NoteLine>https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/util/PriorityQueue.java</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>An unbounded priority Queue queue based on a priority heap.</NoteLine>
   <NoteLine>The elements of the priority queue are ordered according to their</NoteLine>
   <NoteLine>Comparable natural ordering, or by a Comparator provided at queue construction time, </NoteLine>
   <NoteLine>depending on which constructor is used. A priority queue does not permit Nil elements.</NoteLine>
   <NoteLine>A priority queue relying on natural ordering also does not permit insertion of non-comparable </NoteLine>
   <NoteLine>objects (doing so may result in an `IllegalCastException`).</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>The _head_ of this queue is the _least_ element with respect to the specified ordering.  </NoteLine>
   <NoteLine>If multiple elements are tied for least value, the head is one of those elements -- ties are</NoteLine>
   <NoteLine>broken arbitrarily. The queue retrieval operations `Poll`, `Remove`, `Peek}`, and `Element` access the</NoteLine>
   <NoteLine>element at the head of the queue.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>A priority queue is unbounded, but has an internal _capacity_ governing the size of an array used </NoteLine>
   <NoteLine>to store the elements on the queue.  It is always at least as large as the queue</NoteLine>
   <NoteLine>size. As elements are added to a priority queue, its capacity grows automatically.  </NoteLine>
   <NoteLine>The details of the growth policy are not specified.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Multiple threads should not access a `FKPriorityQueue` instance concurrently if any of the threads </NoteLine>
   <NoteLine>modifies the queue.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Implementation note: this implementation provides O(log(n)) time for the enqueuing and dequeuing methods</NoteLine>
   <NoteLine>`Offer`, `Poll`, `Remove` and `Add`); linear time for the `Remove(Object)` and `Contains(Object)`</NoteLine>
   <NoteLine>methods and constant time for the retrieval methods `Peek, `Element`, and `Size`.</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>Queue()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>646289407</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Queue() As FKComparable</SourceLine>
   <SourceLine>The priority queue is represented as a balanced binary heap: the two</SourceLine>
   <SourceLine>children of queue(n) are queue(2*n+1) and queue(2*(n+1)). The</SourceLine>
   <SourceLine>priority queue is ordered by comparator, or by the elements'</SourceLine>
   <SourceLine>natural ordering, if `Comparator` is Nil: For each node n in the</SourceLine>
   <SourceLine>heap and each descendant d of n, n &lt;= d.  he element with the</SourceLine>
   <SourceLine>lowest value is in queue[0], assuming the queue is nonempty.</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Queue() As FKComparable</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>mSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>The number of elements in the priority queue.</CodeDescription>
  <PartID>672718847</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mSize As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mSize As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>ModCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>The number of times this priority queue has been structurally modified.</CodeDescription>
  <PartID>279920639</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ModCount As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ModCount As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>mComparator</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>The comparator, or Nil if priority queue uses elements natural ordering.</CodeDescription>
  <PartID>1934145535</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mComparator As FKComparator</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mComparator As FKComparator</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Size</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>307615743</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Size As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Size As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return mSize</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Comparator</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>The comparator, or Nil if priority queue uses elements natural ordering.</CodeDescription>
  <PartID>1677903871</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Comparator As FKComparator</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Comparator As FKComparator</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return mComparator</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Size</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>DEFAULT_INITIAL_CAPACITY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>430483455</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>11</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
</block>
</RBProject>
